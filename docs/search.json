[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Here is a list of conferences focused on food, agricultural, and environmental economics. Please check the official websites for updates. Feel free to let me know if you are aware of other great conferences that are not included in this list.\n\n\n\n\n\nA list of small grants for graduate students in general economics and related fields is available on Dr. Anne Byrne’s website.\n\n\n\nThere are many great collections of links that were very helpful during my Ph.D. journey in food, agriculture, and environmental economics.\n\nDr. Aaron Smith at UC Berkeley and UC Davis provides a great gallery on Ag Data.\nDr. Marc Bellemare at the University of Minnesota offers a list of suggested reading on food and agriculture, economic theory, econometrics, and writing.\nDr. Shanjun Li at Cornell University, Dr. Elinor Benami at Virgina Tech, Dr. Tobias Klein at Tilburg University present a list of helpful resources for Ph.D. students."
  },
  {
    "objectID": "resources.html#conferences",
    "href": "resources.html#conferences",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Here is a list of conferences focused on food, agricultural, and environmental economics. Please check the official websites for updates. Feel free to let me know if you are aware of other great conferences that are not included in this list."
  },
  {
    "objectID": "resources.html#grants",
    "href": "resources.html#grants",
    "title": "Qingyin Cai",
    "section": "",
    "text": "A list of small grants for graduate students in general economics and related fields is available on Dr. Anne Byrne’s website."
  },
  {
    "objectID": "resources.html#other-sources",
    "href": "resources.html#other-sources",
    "title": "Qingyin Cai",
    "section": "",
    "text": "There are many great collections of links that were very helpful during my Ph.D. journey in food, agriculture, and environmental economics.\n\nDr. Aaron Smith at UC Berkeley and UC Davis provides a great gallery on Ag Data.\nDr. Marc Bellemare at the University of Minnesota offers a list of suggested reading on food and agriculture, economic theory, econometrics, and writing.\nDr. Shanjun Li at Cornell University, Dr. Elinor Benami at Virgina Tech, Dr. Tobias Klein at Tilburg University present a list of helpful resources for Ph.D. students."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Welcome to my website!\nI’m a PhD candidate in the Department of Applied Economics at the University of Minnesota. My fields of interest include food and agricultural economics, consumer economics, empirical IO, and environmental economics.\nMy research addresses complex and topical economic problems in food and agricultural markets, focusing on the impact of climate shocks on agrifood systems and farmland consolidation, as well as the effects of food price inflation on retail landscapes and consumer welfare.\nHere is the latest version of my CV.\nEmail: cai00154@umn.edu"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Welcome to my website!\nI’m a PhD candidate in the Department of Applied Economics at the University of Minnesota. My fields of interest include food and agricultural economics, consumer economics, empirical IO, and environmental economics.\nMy research addresses complex and topical economic problems in food and agricultural markets, focusing on the impact of climate shocks on agrifood systems and farmland consolidation, as well as the effects of food price inflation on retail landscapes and consumer welfare.\nHere is the latest version of my CV.\nEmail: cai00154@umn.edu"
  },
  {
    "objectID": "Lec1.html#section",
    "href": "Lec1.html#section",
    "title": "Day 1: Basics of R",
    "section": "",
    "text": "Slide Guide\n\nClick on the three horizontally stacked lines at the bottom left corner of the slide, then you will see the table of contents, and you can jump to the section you want to see.\nHitting letter “o” on your keyboard and you will have a panel view of all the slides.\nYou can directly write and run R code, and see the output on slides.\nWhen you want to execute (run) code, hit command + enter (Mac) or Control + enter (Windows) on your keyboard. Alternatively, you can click the “Run Code” button on the top left corner of the code chunk.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#section-1",
    "href": "Lec1.html#section-1",
    "title": "Day 1: Basics of R",
    "section": "",
    "text": "Learning Objectives\n\nTo understand the R coding rules.\nTo understand the basic types of data and structure in R, and to be able to manipulate them.\nTo be able to use base R functions to do some mathematical calculations.\nTo be able to create R projects and save and load data in R.\n\n\n\n Reference\n\nSection 6: Workflow: scripts, R for Data Science\nSection 8: Workflow: projects, R for Data Science"
  },
  {
    "objectID": "Lec1.html#section-2",
    "href": "Lec1.html#section-2",
    "title": "Day 1: Basics of R",
    "section": "",
    "text": "Today’s outline\n\nGeneral coding rules in R\nBasic data types in R\n\nTypes of Data Structures in R\n\nVector (one-dimensional array)\nMatrix (Two-dimensional array)\nData Frame\nList\n\n\nMatrix/Linear Algebra in R\nLoading and Saving Data\nExercise problems\nAppendix: Useful base-R functions"
  },
  {
    "objectID": "Lec1.html#before-you-start",
    "href": "Lec1.html#before-you-start",
    "title": "Day 1: Basics of R",
    "section": "Before you start",
    "text": "Before you start\n\n\nWe’ll cover many basic topics today.\nYou don’t need to memorize nor completely understand all the contents in this lecture.\nAt the end of each section, I will include a summary of the key points you need to know. As long as you understand those key points, you are good to go."
  },
  {
    "objectID": "Lec1.html#general-coding-rules-in-r",
    "href": "Lec1.html#general-coding-rules-in-r",
    "title": "Day 1: Basics of R",
    "section": "General coding rules in R",
    "text": "General coding rules in R\n\n\nBasics\nObject Naming\nPackages\n\n\n\n\nR is object-oriented: Everything in R is an “object” that you can name and reuse.\n\nCreating objects: Use &lt;- or = to store information in objects.\n\nExample: e.g., x &lt;- 1 assigns 1 to an object called x.\n\n\n\nObjects can be overwritten: If you use the same name twice, the new value replaces the old one.\nView your objects: Simply type the object name to see what’s stored inside. \n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nObject names must start with a letter (not a number or symbol).\n\n\nUse underscores _ or dots . to separate words in names.\n\n\nChoose descriptive names that tell you what the object contains.\n\nGood: student_age, exam_scores\n\nAvoid: x, data1, thing\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPackages provide extra functions beyond base R\n\n\nInstall once: install.packages(\"package_name\")\n\n\nLoad every session: library(package_name)\n\n\nTroubleshooting: See could not find function \"xxxx\"? → Load the package!"
  },
  {
    "objectID": "Lec1.html#overview",
    "href": "Lec1.html#overview",
    "title": "Day 1: Basics of R",
    "section": "Overview",
    "text": "Overview\n\n\nData types in R\nHow to check data types?\nData Type Conversion\n\n\n\nThese are the basic data elements in R.\n\n\n\n\n\n\n\nData Type\nDescription\nExample\n\n\n\nnumeric\nGeneral number, can be integer or decimal.\n\n5.2, 3L (the L makes it integer)\n\n\ncharacter\nText or string data.\n\"Hello, R!\"\n\n\nlogical\nBoolean values.\n\nTRUE, FALSE\n\n\n\ninteger\nWhole numbers.\n\n2L, 100L\n\n\n\ncomplex\nNumbers with real and imaginary parts.\n3 + 2i\n\n\nraw\nRaw bytes.\ncharToRaw(\"Hello\")\n\n\nfactor\nCategorical data. Can have ordered and unordered categories.\nfactor(c(\"low\", \"high\", \"medium\"))\n\n\n\n\n\n\nThree main data types you’ll use most often: numeric, character, and logical.\n\n\nText must be in quotes:\n\nCorrect: \"Hello\" or 'Hello'\n\nWrong: Hello (without quotes)\n\n\n\n\n\nUse class() or is.XXX() to examine the data types.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nConvert between data types using as.XXX() functions:\n\n\nas.numeric() → converts to numbers\n\n\nas.character() → converts to text\n\n\nas.factor() → converts to categories\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#logical-values-a.k.a.-boolean-values",
    "href": "Lec1.html#logical-values-a.k.a.-boolean-values",
    "title": "Day 1: Basics of R",
    "section": "Logical values (a.k.a. Boolean values)",
    "text": "Logical values (a.k.a. Boolean values)\n\n\nBasics\nExample\n\n\n\n\nLogical values are TRUE, FALSE, and NA (not available/undefined).\nThey are often generated by comparison operators: &lt;, &gt;, &lt;=, &gt;=, ==, !=.\nLogical operators include & (and), | (or), and ! (not). \nEvery comparison evaluates to TRUE, FALSE, or NA.\nWhen treated as numbers, TRUE equals 1 and FALSE equals 0.\nLogical values can be used as indices to subset vectors or data.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#summary",
    "href": "Lec1.html#summary",
    "title": "Day 1: Basics of R",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\nKey points\n\n\n\nR defines several basic data types, including numeric, character, and logical.\nUse the class() function to check the data type of an object.\nUse as.XXX() functions to convert an object from one type to another.\nLogical values play an important role in many R operations."
  },
  {
    "objectID": "Lec1.html#types-of-data-structures-in-r",
    "href": "Lec1.html#types-of-data-structures-in-r",
    "title": "Day 1: Basics of R",
    "section": "Types of Data Structures in R",
    "text": "Types of Data Structures in R\nR provides several types of data structures for storing data.\n\n\n\n\n\n\n\n\n\nData Structure\nDescription\nCreation Function\nExample\n\n\n\nVector\nOne-dimensional; Holds elements of the same type.\nc()\nc(1, 2, 3, 4)\n\n\nMatrix\nTwo-dimensional; Holds elements of the same type.\nmatrix()\nmatrix(1:4, ncol=2)\n\n\nArray\nMulti-dimensional; Holds elements of the same type.\narray()\narray(c(1:12), dim = c(2, 3, 2))\n\n\nList\nCan hold elements of different types.\nlist()\nlist(name=\"John\", age=30, scores=c(85, 90, 92))\n\n\nData Frame\nLike a table; Each column can hold different data types. This is the most common data structure.\ndata.frame()\ndata.frame(name=c(\"John\", \"Jane\"), age=c(30, 25))"
  },
  {
    "objectID": "Lec1.html#vec",
    "href": "Lec1.html#vec",
    "title": "Day 1: Basics of R",
    "section": "Vector (one-dimensional array)",
    "text": "Vector (one-dimensional array)\n\n\nBasics\nExample\n\n\n\n\nA vector object is a collection of elements of the same type.\n\nVectors can contain numbers, characters, or logical values.\n\nUse c() to create a vector or to combine vectors (c stands for combine).\n\n\nBasic syntax\nc(element1, element2, element3, ...)\n\nYou can name each element in a vector:\nc(x1 = element1, x2 = element2, x3 = element3, ...)\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#vector-how-to-manipulate",
    "href": "Lec1.html#vector-how-to-manipulate",
    "title": "Day 1: Basics of R",
    "section": "Vector: How to manipulate?",
    "text": "Vector: How to manipulate?\n\n\nIndexing\nLogical Vectors\n\n\n\nBasics\n\nUse square brackets [] to extract one or more elements from a vector by their position.\nIf a vector has names, you can extract elements using their names.\nTo update an element, assign a new value to the position (or name) you want to change. \n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nA logical vector contains only logical values (TRUE and FALSE).\n\nLogical vectors can be used as index vectors: only elements matching TRUE are returned.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#in-class-exercise",
    "href": "Lec1.html#in-class-exercise",
    "title": "Day 1: Basics of R",
    "section": "In-class Exercise",
    "text": "In-class Exercise\nThe following code randomly samples 30 numbers from a uniform distribution between 0 and 1, and stores the result in x.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nQuestions \n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#mat",
    "href": "Lec1.html#mat",
    "title": "Day 1: Basics of R",
    "section": "Matrix (Two-dimensional array)",
    "text": "Matrix (Two-dimensional array)\n\n\nBasics\nExample 1\nExample 2\n\n\n\n\nA matrix is a collection of elements of the same type arranged in rows and columns (essentially a vector with an added dimension attribute).\nIn practice, matrices are less common for real-world data storage and are used mainly for linear algebra operations.\nUse the matrix() function to create a matrix.\n\n\nSyntax\nmatrix(data = vector_data, nrow = number_of_rows, ncol = number_of_column, byrow = FALSE)\n\n\nYou need to specify the vector_data and the number_of_rows and number_of_columns.\nIf the length of vector_data is a multiple of number_of_columns (or number_of_rows), R fills in the other dimension automatically.\nBy default, values are filled by column. Use byrow = TRUE to fill by row.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can also create a matrix by combining multiple vectors using cbind() or rbind() functions.\n\nrbind() function combines vectors by row.\ncbind() function combines vectors by column.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#matrix-how-to-manipulate",
    "href": "Lec1.html#matrix-how-to-manipulate",
    "title": "Day 1: Basics of R",
    "section": "Matrix: How to manipulate",
    "text": "Matrix: How to manipulate\n\n\nIndexing\nMiscellaneous\n\n\n\n\nYou can access matrix elements with [].\nSpecify the row index and column index: [row, col].\nLeave one index blank to select an entire row or column.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can add column names and row names to a matrix using colnames() and rownames() functions. If a matrix has column names and row names, you can use the names as the index.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#matrix-exercise-problem-optional",
    "href": "Lec1.html#matrix-exercise-problem-optional",
    "title": "Day 1: Basics of R",
    "section": "Matrix: Exercise Problem (Optional)",
    "text": "Matrix: Exercise Problem (Optional)\nUse the following matrix:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nQuestions \n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#df",
    "href": "Lec1.html#df",
    "title": "Day 1: Basics of R",
    "section": "Data Frame",
    "text": "Data Frame\n\n\nBasics\nIndexing\n$ and [[ ]] operator\nAdding and Removing Columns\nMiscellaneous\n\n\n\n\nA data.frame class object is similar to a matrix, but each column can store a different data type.\nIt is designed for tabular data, which makes it the most common structure in real-world datasets.\n\nSyntax\ndata.frame(column_1 = vector_1, column_2 = vector_2)\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIf you do not provide column names, R automatically assigns default names (e.g., X1, X2, X3).\n\n\n\n\nYou can access elements of a data.frame using square brackets [].\nSpecify the row and column index, similar to a matrix.\n\nIndexing options include:\n\n\nPositional index (e.g., df[1, 2])\n\n\nColumn names (e.g., df[ , \"Age\"])\n\n\nLogical vectors (e.g., df[df$Age &gt; 20, ])\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYou can extract a single column from a data.frame using the $ or [[ ]] operator.\n$ and [[ ]] can only return one column at a time as a vector, while [] can select multiple columns.\nType ?\"$\", ?\"[\", and ?\"[[\" in the Console for details.\nInside [[ ]], provide the column name as a character (e.g., df[[\"Age\"]]).\nWhy this matters: many R functions (mean(), sum(), sqrt(), etc.) work on vectors, and $ / [[ ]] are the fastest way to extract a vector for calculations.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can add a new column to a data.frame object using the $ operator.\nSyntax\ndata_frame$new_column &lt;- vector_data\n\nA new column added to a data.frame must have the same length as the number of rows.\nIf the length does not match, R will recycle the values to fill the column.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#in-class-exercise-1",
    "href": "Lec1.html#in-class-exercise-1",
    "title": "Day 1: Basics of R",
    "section": "In-class Exercise",
    "text": "In-class Exercise\nWe will use the built-in dataset mtcars for this exercise. Run the following code to load the data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nQuestions\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#with-and-within",
    "href": "Lec1.html#with-and-within",
    "title": "Day 1: Basics of R",
    "section": "with() and within()",
    "text": "with() and within()\n\nThe with() function evaluates an expression inside a data frame.\n\nExample: with(df_student, mean(Age)) instead of mean(df_student$Age)\n\n\n\nThe within() function is similar, but it allows you to modify the data frame directly.\n\nExample: df_student &lt;- within(df_student, { GPA2 &lt;- GPA^2 })\n\n\n\nUsing these functions helps avoid repeatedly typing the data frame name and $.\n\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#list",
    "href": "Lec1.html#list",
    "title": "Day 1: Basics of R",
    "section": "List",
    "text": "List\n\n\nBasics\nIndexing\n\n\n\n\nA list in R can store elements of different types and sizes: numbers, characters, vectors, matrices, data frames, or even other lists.\nA list is a flexible container that can hold any combination of data structures.\nUse the list() function to create a list.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nYou can access list elements using $, [], or [[ ]].\n[] returns a list containing the selected elements.\n[[ ]] returns a single element itself (not wrapped in a list).\n$ is shorthand for [[ ]], but it only works if the list elements are named.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#summary-1",
    "href": "Lec1.html#summary-1",
    "title": "Day 1: Basics of R",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\nKey points\n\n\n\nKnow how to create the main data structures in R: vector, matrix, data.frame, and list.\n\nVectors and matrices store one data type.\n\nData frames and lists can store different data types.\n\n\n\nLearn how to access, subset, and modify elements using indexing.\n\nIndexing can be positional, logical, or by name.\n\nOperators include [], $, and [[ ]]."
  },
  {
    "objectID": "Lec1.html#r-base-functions-for-data-import-and-export",
    "href": "Lec1.html#r-base-functions-for-data-import-and-export",
    "title": "Day 1: Basics of R",
    "section": "R base functions for data import and export",
    "text": "R base functions for data import and export\n\nLike other softwares (e.g., Stata, Excel) do, R has two native data formats: .Rdata (or .rdata) and .Rds (or .rds).\n\n\n.Rdata is used to save multiple R objects.\n\n.Rds is used to save a single R object.\n\n\n\n\n\n\n.Rdata format\n\nLoad data:\n\nload(\"path_to_Rdata_file\")\n\nSave data:\n\nsave(object_name1, object_name2, file = \"path_to_Rdata_file\")\n\n.Rds format\n\nLoad data:\n\nreadRDS(\"path_to_Rds_file\")\n\nSave data:\n\nsaveRDS(object_name, file = \"path_to_Rds_file\")"
  },
  {
    "objectID": "Lec1.html#setting-the-working-directory",
    "href": "Lec1.html#setting-the-working-directory",
    "title": "Day 1: Basics of R",
    "section": "Setting the working directory",
    "text": "Setting the working directory\n\n\nBasics\nWorking Directory\nsetwd()\nR project\n\n\n\nTo access to the data file, you need to provide the path to the file (the location of the data file).\n\nExample\nSuppose that I want to load data_example.rds in the Data folder. On my computer, the full path (i.e., absolute path) to the file is /Users/qingyin/Dropbox/Teaching/R_Review_2025/Data/data_example.rds.\n\n# this code only works in my local machine\ndf_example &lt;- readRDS(file = \"/Users/qingyin/Dropbox/Teaching/R_Review_2025/Data/data_example.rds\")\n\n\nWhy avoid hard-coding full paths?\n\nTyping the full file path every time is cumbersome and slows you down.\n\nHard-coded paths make your code less portable:\n\nTeam members may have different folder structures.\n\nCode that works on your computer might fail on theirs.\n\n\n\n\n\n\nThe working directory is the folder where R looks for files to load and saves files you create.\n\nCheck the current working directory with getwd().\n\nBy default, R uses your home directory (or the project folder if you’re in an R Project).\n\n\n\n\nIf you often import or save data in a specific folder, it helps to set that folder as the working directory.\nUse setwd() to change the working directory:\n\nExample\nIn my case, I set the working directory to the R_Review_2025 folder.\n\nsetwd(\"/Users/qingyin/Dropbox/Teaching/R_Review_2025\")\n\nNow, R will look for the data file in the R_Review_2025 folder by default. So, I can load the data using relative path, not absolute path.\n\ndf_example &lt;- readRDS(file = \"Data/data_example.rds\")\n\n\nProblems\n\n\nsetwd() still relies on an absolute path, which can vary across people.\n\ne.g., one person saves files in Dropbox, another in Google Drive).\n\n\nThis means setwd() does not fully solve the collaboration problem.\n\ncode may still break if teammates have different folder structures.\n\n\n\n\n\n\n\nWhat is it?\nLet’s create a project!\nLoad the data\n\n\n\n\n“R experts keep all the files associated with a project together — input data, R scripts, analytical results, figures. This is such a wise and common practice that RStudio has built-in support for this via projects.” - R for Data Science Ch 8.4\n\n\nRStudio Projects\n\nAn RStudio project is a way to organize your work.\nWhen you open a Project, R automatically sets the working directory to the folder containing the .Rproj file — no need for setwd().\nAs long as the folder structure inside the Project is consistent, you can share code with teammates and relative paths will work for everyone.\n\n\n\nFollow this steps illustrated in this document: R for Data Science Ch 8.4\n\n\n\nIn RStudio, check the top-right corner of the window to see the active Project name.\nAlternatively, open a Project by double-clicking the .Rproj file in Finder (Mac) or File Explorer (Windows).\nUse getwd() to confirm the current working directory — it should be the Project folder.\nLoad the data_example.rds data file with readRDS()."
  },
  {
    "objectID": "Lec1.html#loading-data-other-than-.rds-.rds-format",
    "href": "Lec1.html#loading-data-other-than-.rds-.rds-format",
    "title": "Day 1: Basics of R",
    "section": "Loading data other than .Rds (.rds) format",
    "text": "Loading data other than .Rds (.rds) format\n\n\nBasics\nLet’s do it\n\n\n\n\nR can load data from various formats including .csv, .xls(x), and.dta.\nThere exists many functions that can help you to load data:\n\n\nread.csv() to read a .csv file.\n\n\nread_excel() from the readxl package to read data sheets from an .xls(x) file.\n\n\nread.dta13() function from the readstata13 package to read a STATA data file (.dta).\n\n\n\n\nUse import() function of the rio package\n\n\nBut import() function from the rio package might be the most convenient one to load various format of data.\n\nUnlike, read.csv() and read.dta13() which specialize in reading a specific type of file, import() can load data from various sources.\n\n\n\n\n\nIn Data folder, data_example data is saved with three different formats: data_example.csv, data_example.dta, and data_example.xlsx. Let’s load the data using import() function on your Rstudio.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#saving-the-data",
    "href": "Lec1.html#saving-the-data",
    "title": "Day 1: Basics of R",
    "section": "Saving the data",
    "text": "Saving the data\n\nYou can save data in many formats (.csv, .dta, .xlsx, etc.).\n\n\nBut unless you need compatibility with other software, it’s best to save data in .rds.\n\nHow: saveRDS(object_name, path_to_save)\n\n\n\n\n\nWhy prefer .rds?\n\nDesigned for R — no reason to use another format if you work only in R.\n\n\nFaster and more efficient for saving and loading.\n\nProduces smaller file sizes compared to .csv or .xlsx when data gets larger.\n\n(Try it! Check the size of the data_example dataset saved in different formats.)\n\n\nLet’s try!\n\nLoad the data_example data in the Data folder.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#summary-2",
    "href": "Lec1.html#summary-2",
    "title": "Day 1: Basics of R",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\nKey points\n\n\n\nRstudio project (.Rproj) is a useful tool to organize your work. As long as the folder structure under the .Rproj is the same, you can share the code involving data loading with your team members.\n\nTo load data:\n\nuse readRDS() function for .Rds (.rds) format.\n\nyou can use import() function from the rio package for various format.\n\n\n\nTo save the data, it is recommended to use .rds format and use saveRDS() function."
  },
  {
    "objectID": "Lec1.html#exercise-problems-1-vector",
    "href": "Lec1.html#exercise-problems-1-vector",
    "title": "Day 1: Basics of R",
    "section": "Exercise Problems 1: Vector",
    "text": "Exercise Problems 1: Vector\n\n\nProblems\nAnswers\n\n\n\n\nCreate a sequence of numbers from 20 to 50 and name it x. Let’s change the numbers that are multiples of 3 to 0.\nsample() is commonly used in Monte Carlo simulation in econometrics. Run the following code to create r. What does it do? Use ?sample to find out what the function does.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nFind the value of mean and SD of vector r without using mean() and sd().\nFigure out which position contains the maximum value of vector r. (use which() function. Run ?which() to find out what the function does.).\nExtract the values of r that are larger than 50.\nExtract the values of r that are larger than 40 and smaller than 60.\nExtract the values of r that are smaller than 20 or larger than 70.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#exercise-problem-2-data-frame",
    "href": "Lec1.html#exercise-problem-2-data-frame",
    "title": "Day 1: Basics of R",
    "section": "Exercise Problem 2: Data Frame",
    "text": "Exercise Problem 2: Data Frame\n\n\nProblems\nAnswer\n\n\n\n\n\nLoad the file nscg17tiny.dta. You can find the data in the Data folder.\n\nThis data is a subset of the National Survey of College Graduates (NSCG) 2017, which collects data on the educational and occupational characteristics of college graduates in the United States.\n\n\nEach row corresponds to a unique respondent. Let’s create a new column called “ID”. There are various ways to create an ID column. Here, let’s create an ID column that starts from 1 and increments by 1 for each row.\nTo take a quick look at the summary statistics of a specific column, summary() function is useful. Use summary() to create a table of the descriptive statistics for hrswk. You’ll provide hrswk column to summary() as a vector.\nCreate a new variable in your data that represents the z-score of the hours worked (use hrswk variable).\\(Z = (x - \\mu)/\\sigma\\), where \\(Z = \\text{standard score}\\), \\(x =\\text{observed value}\\), \\(\\mu = \\text{mean of sample}\\), and \\(\\sigma = \\text{standard deviation of the sample}\\).\nCalculate the share of observations in your data sample with above average hours worked.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec1.html#useful-functions",
    "href": "Lec1.html#useful-functions",
    "title": "Day 1: Basics of R",
    "section": "Appendix: A List of Useful R Built-in Functions",
    "text": "Appendix: A List of Useful R Built-in Functions\n\n\nFor data manipulation\nFor numerical manipulation\n\n\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\nlength()\nget the length of the vector and list object\n\n\n\nnrow(),ncol()\n\nget the number of rows or columns\n\n\ndim()\nget the dimension of the data\n\n\n\nrbind(),cbind()\n\nCombine R Objects by rows or columns\n\n\n\ncolMeans(), rowMeans()\n\ncalculate the mean of each column or row\n\n\n\nwith and within()\n\nYou don’t need to use `—\n\n\n\n\n\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\nsum(), mean(), var(), sd(), cov(), cor(), max(), min(), abs(), round()\n\n\n\n\nlog() and exp()\n\nLogarithms and Exponentials\n\n\nsqrt()\nComputes the square root of the specified float value.\n\n\nseq()\nGenerate a sequence of numbers\n\n\nsample()\nrandomly sample from a vector\n\n\nrnorm()\ngenerate random numbers from normal distribution\n\n\nrunif()\ngenerate random numbers from uniform distribution"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Drought and Fresh Produce Production in California (with Metin Çakır and Timothy Beatty)  R & R at Agricultural Economics\n\nAbstract: California’s increasingly frequent and intense drought is a pressing problem for the state’s agriculture and the U.S. food supply, as the state is the major producer of many agricultural products. Particularly, California supplies more than half of all fruit and vegetables in the country. This paper examines the severity of the problem by estimating the impacts of the drought on California’s fresh fruit and vegetable production. We estimate panel data models using comprehensive, county-level agriculture, irrigation, and weather data from 2000 to 2019. Our findings indicate that droughts significantly reduce total output, ranging from 1.2% to 2.2% for each additional week of drought. The estimated effect is driven by lower yields and fewer harvested acres due to the drought. The drought effects also differ among crops, with thirsty crops and crops with lower economic returns and established insurance programs being disproportionately affected. Results also show the extent to which higher irrigation levels mitigate the adverse effects of drought. Our findings provide insights into the importance of enhancing drought-related risk management and implications for designing cost-effective policies for future adaptation decisions.\n\n\n\nDrought and Farm Consolidation: Long-Run Evidence from U.S. Agriculture (with Metin Çakır)\n\nAbstract: In this study, we examine the long-run impacts of drought on farm consolidation in the U.S. crop sector from 1982-2022. Using four decades of county-level data and a long-difference design, we find that cumulative drought exposure significantly increases farm size, primarily through the exit of smaller farms. Effects are strongest in rainfed regions and among field crops, while specialty crop areas show weaker or negative responses to drought. These findings highlight drought as a structural force in U.S. agriculture and underscore the need for targeted climate adaptation policies.\n\n\n\nCalifornia Drought, Fresh Fruit and Vegetable Prices, and Consumer Welfare (with Metin Çakır, Timothy Beatty, and Timothy Park)\n\nAbstract: California produces more than a third of all vegetables and two-thirds of all fruits and nuts in the United States and is the largest producer of over fifty fruits, vegetables, and tree nuts. Meanwhile, California agriculture faces important challenges due to sustained drought with increasing frequency and severity across the state since 2011. This article estimates the effect of the recent California drought on the retail prices of fresh fruits and vegetables (FFV) using panel data models. We build a dataset comprising detailed information on FFV prices and the drought. Specifically, we construct a monthly panel price index for fresh fruits and vegetables using retail scanner data and obtain California’s county-level historical drought data from the United States Drought Monitor. In our estimation, we account for the heterogeneous effects of the drought across products and space. Our main finding is that the drought had a positive and significant effect on FFV prices. This effect is generally larger on fruits than vegetables and is robust to alternative measures of drought and model specifications. Furthermore, we find that the drought’s impacts on production and imports are among the significant determinants of its overall effect on prices.\n\n\n\nDoes the Recent Food Price Inflation Differ by Store Format? (with Metin Çakır and Megan Sweitzer)\n\nAbstract: Recent spikes in food prices have raised significant economic concerns in the United States. Understanding how food price inflation varies across store formats provides valuable insights into consumer behavior and the strategies retailers employ during economic downturns. In this study, we use retail scanner data to construct price indices by store format for various food product groups, allowing us to estimate differences in the rates of price changes across stores. We then estimate a structural store-choice model to examine how these differential rates of price changes affect consumers’ preferences for different store formats. Our findings reveal that food price inflation rates vary significantly by store format, with nontraditional stores generally experiencing lower inflation rates than traditional stores across most food categories. These differential price changes also influence consumer store and product choices.\n\n\n\nEmotional Shocks and Consumer Spending (with Qingxiao Li)  R & R at Journal of Economic Behavior & Organization\n\nAbstract: This study examines how emotional shocks affect consumer spending by using unexpected National Football League (NFL) game outcomes as a natural experiment. We analyze consumer scanner data from 83,332 households during regular seasons from 2004 to 2019, using Las Vegas pregame point spreads and actual outcomes to identify emotional shocks. We find that unexpected losses by home teams increase household shopping trips and spending, while unexpected wins reduce spending. These emotional impacts are concentrated within three days post-game and amplified for high-stakes games. These findings provide insights into how emotional shocks from unexpected events can influence consumer spending behavior.\n\n\n\nBad Air Days: Pollution, Forecasts, and Consumer Shopping Behavior (with Qingxiao Li and Lifeng Ren)\n\nAbstract: This paper provides nationwide evidence of how short-term exposure to fine particulate matter causally affects household retail shopping behavior in the United States. Linking detailed household transaction records with daily air quality data, we employ an instrumental-variable strategy that exploits exogenous, wind-driven variation in pollution. We find that air pollution reduces both store visits and retail spending. Consumers disproportionately reduce purchases of nonessential goods and partially shift toward online shopping. Higher-income and younger households show greater avoidance, whereas vulnerable groups show limited capacity to adjust. Using air-quality forecasts, we find evidence of strategic intertemporal substitution, with consumers increasing current shopping when poor air quality is forecasted. Our findings reveal that air pollution generates behavioral responses in consumption, with implications for environmental policy and information provision.\n\n\n\nMoral Hazard in Agricultural Insurance - Evidence from Non-Voluntary Sow Insurance Program in China (with Xudong Rao and Yuehua Zhang)  Conditionally accepted at Australian Journal of Agricultural and Resource Economics\n\nAbstract: Agricultural insurance has not yet lived up to its full potential despite its apparent benefits to agricultural producers. Moral hazard is suspected to be a major obstacle to the adoption of agricultural insurance, especially livestock insurance. In this study, we take advantage of a government-supported, non-voluntary sow insurance program in China and examine whether farmers being aware of having insurance coverage leads to their hazardous behaviors. We estimate these impacts by using an endogenous treatment effects model which controls for endogeneity in our treatment variable. Our results are robust and suggest that farmers’ awareness of their insurance enrollment led to statistically and economically significant differences in their sow mortality rates. Therefore, our results demonstrate the presence of hazardous behavior.\n\n\n\nHow Importance is Junior High School Education Early in Life to Cognitive Outcomes of Elderlies: Evidence from A Quasi-Experiment in China (with Wen You and Yuehua Zhang)\n\nAbstract: As an important part of mental health, cognitive outcomes play a vital role in the quality of life for older adults. Identifying potential early life factors that can influence cognitive outcomes at older ages is of great public health importance. We examine the impact of obtaining junior high education early in life on the cognitive abilities of elderly individuals using a wave of longitudinal data set, the China Health and Retirement Longitudinal Study. We leverage the Cultural Revolution of 1966-1968 as a quasi-experiment identification strategy since this political event almost completely closed down junior high schools in China and created exogenous shocks to the relevant generation’s junior high education experience. We employed the instrumental variable and regression discontinuity methods using this political event as an instrument and discontinuity threshold respectively. Empirical results show that respondents who successfully obtained junior high school education early in life showed higher scores on all cognitive tests in later life. This research further excavates the long-term impact of the Cultural Revolution and provides evidence to support junior high education completion policies and programs for children.\n\n\n\n\nExtreme Weather Events and Farm Consolidation in the United States (with Metin Çakır)\nUnintended Doses: How Livestock Insurance Fuels Antibiotic Use on Chinese Hog Farms?(with Xudong Rao, Xingguo Wang, and Calum Turvey)\nSocietal Preferences for Donation to Rare Diseases: A Discrete Choice Experiment (with Wen Lin and Yuehua Zhang)\n\n\n\nQingyin Cai, Yulian Ding, Calumn Turvey, and Yuehua Zhang (2021). “The Influence of Past Experience on Farmers’ Preferences for Hog Insurance Products: a Natural Experiment and Choice Experiment in China.” The Geneva Papers on Risk and Insurance - Issues and Practice, 46: 399-421. [Link]"
  },
  {
    "objectID": "research.html#working-papers",
    "href": "research.html#working-papers",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Drought and Fresh Produce Production in California (with Metin Çakır and Timothy Beatty)  R & R at Agricultural Economics\n\nAbstract: California’s increasingly frequent and intense drought is a pressing problem for the state’s agriculture and the U.S. food supply, as the state is the major producer of many agricultural products. Particularly, California supplies more than half of all fruit and vegetables in the country. This paper examines the severity of the problem by estimating the impacts of the drought on California’s fresh fruit and vegetable production. We estimate panel data models using comprehensive, county-level agriculture, irrigation, and weather data from 2000 to 2019. Our findings indicate that droughts significantly reduce total output, ranging from 1.2% to 2.2% for each additional week of drought. The estimated effect is driven by lower yields and fewer harvested acres due to the drought. The drought effects also differ among crops, with thirsty crops and crops with lower economic returns and established insurance programs being disproportionately affected. Results also show the extent to which higher irrigation levels mitigate the adverse effects of drought. Our findings provide insights into the importance of enhancing drought-related risk management and implications for designing cost-effective policies for future adaptation decisions.\n\n\n\nDrought and Farm Consolidation: Long-Run Evidence from U.S. Agriculture (with Metin Çakır)\n\nAbstract: In this study, we examine the long-run impacts of drought on farm consolidation in the U.S. crop sector from 1982-2022. Using four decades of county-level data and a long-difference design, we find that cumulative drought exposure significantly increases farm size, primarily through the exit of smaller farms. Effects are strongest in rainfed regions and among field crops, while specialty crop areas show weaker or negative responses to drought. These findings highlight drought as a structural force in U.S. agriculture and underscore the need for targeted climate adaptation policies.\n\n\n\nCalifornia Drought, Fresh Fruit and Vegetable Prices, and Consumer Welfare (with Metin Çakır, Timothy Beatty, and Timothy Park)\n\nAbstract: California produces more than a third of all vegetables and two-thirds of all fruits and nuts in the United States and is the largest producer of over fifty fruits, vegetables, and tree nuts. Meanwhile, California agriculture faces important challenges due to sustained drought with increasing frequency and severity across the state since 2011. This article estimates the effect of the recent California drought on the retail prices of fresh fruits and vegetables (FFV) using panel data models. We build a dataset comprising detailed information on FFV prices and the drought. Specifically, we construct a monthly panel price index for fresh fruits and vegetables using retail scanner data and obtain California’s county-level historical drought data from the United States Drought Monitor. In our estimation, we account for the heterogeneous effects of the drought across products and space. Our main finding is that the drought had a positive and significant effect on FFV prices. This effect is generally larger on fruits than vegetables and is robust to alternative measures of drought and model specifications. Furthermore, we find that the drought’s impacts on production and imports are among the significant determinants of its overall effect on prices.\n\n\n\nDoes the Recent Food Price Inflation Differ by Store Format? (with Metin Çakır and Megan Sweitzer)\n\nAbstract: Recent spikes in food prices have raised significant economic concerns in the United States. Understanding how food price inflation varies across store formats provides valuable insights into consumer behavior and the strategies retailers employ during economic downturns. In this study, we use retail scanner data to construct price indices by store format for various food product groups, allowing us to estimate differences in the rates of price changes across stores. We then estimate a structural store-choice model to examine how these differential rates of price changes affect consumers’ preferences for different store formats. Our findings reveal that food price inflation rates vary significantly by store format, with nontraditional stores generally experiencing lower inflation rates than traditional stores across most food categories. These differential price changes also influence consumer store and product choices.\n\n\n\nEmotional Shocks and Consumer Spending (with Qingxiao Li)  R & R at Journal of Economic Behavior & Organization\n\nAbstract: This study examines how emotional shocks affect consumer spending by using unexpected National Football League (NFL) game outcomes as a natural experiment. We analyze consumer scanner data from 83,332 households during regular seasons from 2004 to 2019, using Las Vegas pregame point spreads and actual outcomes to identify emotional shocks. We find that unexpected losses by home teams increase household shopping trips and spending, while unexpected wins reduce spending. These emotional impacts are concentrated within three days post-game and amplified for high-stakes games. These findings provide insights into how emotional shocks from unexpected events can influence consumer spending behavior.\n\n\n\nBad Air Days: Pollution, Forecasts, and Consumer Shopping Behavior (with Qingxiao Li and Lifeng Ren)\n\nAbstract: This paper provides nationwide evidence of how short-term exposure to fine particulate matter causally affects household retail shopping behavior in the United States. Linking detailed household transaction records with daily air quality data, we employ an instrumental-variable strategy that exploits exogenous, wind-driven variation in pollution. We find that air pollution reduces both store visits and retail spending. Consumers disproportionately reduce purchases of nonessential goods and partially shift toward online shopping. Higher-income and younger households show greater avoidance, whereas vulnerable groups show limited capacity to adjust. Using air-quality forecasts, we find evidence of strategic intertemporal substitution, with consumers increasing current shopping when poor air quality is forecasted. Our findings reveal that air pollution generates behavioral responses in consumption, with implications for environmental policy and information provision.\n\n\n\nMoral Hazard in Agricultural Insurance - Evidence from Non-Voluntary Sow Insurance Program in China (with Xudong Rao and Yuehua Zhang)  Conditionally accepted at Australian Journal of Agricultural and Resource Economics\n\nAbstract: Agricultural insurance has not yet lived up to its full potential despite its apparent benefits to agricultural producers. Moral hazard is suspected to be a major obstacle to the adoption of agricultural insurance, especially livestock insurance. In this study, we take advantage of a government-supported, non-voluntary sow insurance program in China and examine whether farmers being aware of having insurance coverage leads to their hazardous behaviors. We estimate these impacts by using an endogenous treatment effects model which controls for endogeneity in our treatment variable. Our results are robust and suggest that farmers’ awareness of their insurance enrollment led to statistically and economically significant differences in their sow mortality rates. Therefore, our results demonstrate the presence of hazardous behavior.\n\n\n\nHow Importance is Junior High School Education Early in Life to Cognitive Outcomes of Elderlies: Evidence from A Quasi-Experiment in China (with Wen You and Yuehua Zhang)\n\nAbstract: As an important part of mental health, cognitive outcomes play a vital role in the quality of life for older adults. Identifying potential early life factors that can influence cognitive outcomes at older ages is of great public health importance. We examine the impact of obtaining junior high education early in life on the cognitive abilities of elderly individuals using a wave of longitudinal data set, the China Health and Retirement Longitudinal Study. We leverage the Cultural Revolution of 1966-1968 as a quasi-experiment identification strategy since this political event almost completely closed down junior high schools in China and created exogenous shocks to the relevant generation’s junior high education experience. We employed the instrumental variable and regression discontinuity methods using this political event as an instrument and discontinuity threshold respectively. Empirical results show that respondents who successfully obtained junior high school education early in life showed higher scores on all cognitive tests in later life. This research further excavates the long-term impact of the Cultural Revolution and provides evidence to support junior high education completion policies and programs for children."
  },
  {
    "objectID": "research.html#work-in-progress",
    "href": "research.html#work-in-progress",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Extreme Weather Events and Farm Consolidation in the United States (with Metin Çakır)\nUnintended Doses: How Livestock Insurance Fuels Antibiotic Use on Chinese Hog Farms?(with Xudong Rao, Xingguo Wang, and Calum Turvey)\nSocietal Preferences for Donation to Rare Diseases: A Discrete Choice Experiment (with Wen Lin and Yuehua Zhang)"
  },
  {
    "objectID": "research.html#publication",
    "href": "research.html#publication",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Qingyin Cai, Yulian Ding, Calumn Turvey, and Yuehua Zhang (2021). “The Influence of Past Experience on Farmers’ Preferences for Hog Insurance Products: a Natural Experiment and Choice Experiment in China.” The Geneva Papers on Risk and Insurance - Issues and Practice, 46: 399-421. [Link]"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Qingyin Cai",
    "section": "",
    "text": "University of Minnesota (Minnesota, United States)\n\nGraduate Course\n\nIntroduction to R Statistical Analysis Software: Summer 2025\n\nLecture 0\nLecture 1\nLecture 2\n\n\n\n\n\n\nUniversity of Minnesota (Minnesota, United States)\n\nGraduate Course\n\nAPEC 8803 Applied Consumer Theory: Fall 2024\n\n\nInstitution Commercial Development International Business School (Shanghai, China)\n\nGraduate Course\n\nWelfare Economics: Spring 2020\n\n\n\n\n\nZhejiang University (Hangzhou, China)\n\nGraduate Course\n\nField Survey and Questionnaire Design: Spring 2019\n\n Undergraduate Course\n\nInsurance Economics: Fall 2018\nSocial Insurance: Fall 2017, Spring 2020\n\n\n\n\n\nUniversity of Minnesota (Minnesota, United States)\n\nIncoming Ph.D. Student Mentor, Deparment of Applied Economcis: 2022-2024"
  },
  {
    "objectID": "teaching.html#instructor",
    "href": "teaching.html#instructor",
    "title": "Qingyin Cai",
    "section": "",
    "text": "University of Minnesota (Minnesota, United States)\n\nGraduate Course\n\nIntroduction to R Statistical Analysis Software: Summer 2025\n\nLecture 0\nLecture 1\nLecture 2"
  },
  {
    "objectID": "teaching.html#guest-lecturer",
    "href": "teaching.html#guest-lecturer",
    "title": "Qingyin Cai",
    "section": "",
    "text": "University of Minnesota (Minnesota, United States)\n\nGraduate Course\n\nAPEC 8803 Applied Consumer Theory: Fall 2024\n\n\nInstitution Commercial Development International Business School (Shanghai, China)\n\nGraduate Course\n\nWelfare Economics: Spring 2020"
  },
  {
    "objectID": "teaching.html#teaching-assistant",
    "href": "teaching.html#teaching-assistant",
    "title": "Qingyin Cai",
    "section": "",
    "text": "Zhejiang University (Hangzhou, China)\n\nGraduate Course\n\nField Survey and Questionnaire Design: Spring 2019\n\n Undergraduate Course\n\nInsurance Economics: Fall 2018\nSocial Insurance: Fall 2017, Spring 2020"
  },
  {
    "objectID": "teaching.html#mentor",
    "href": "teaching.html#mentor",
    "title": "Qingyin Cai",
    "section": "",
    "text": "University of Minnesota (Minnesota, United States)\n\nIncoming Ph.D. Student Mentor, Deparment of Applied Economcis: 2022-2024"
  },
  {
    "objectID": "Lec0.html#outline",
    "href": "Lec0.html#outline",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "Outline",
    "text": "Outline\n\nIntroduction\n\nCourse Review\n\nIcebreaker\n\n\n\nMotivation\n\nWhat you can do with R?\nHow do we use R in course in APEC?\nBasic knowledge about R and Rstudio"
  },
  {
    "objectID": "Lec0.html#course-overview",
    "href": "Lec0.html#course-overview",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "Course overview",
    "text": "Course overview\n\nIntroStyleReferences\n\n\n\nThis one-week course is a boot camp designed to introduce you to R statistical software. My goal is to build a strong foundation for your Ph.D.-level econometrics courses and future research.\n\nBy the end of this week, you will be able to:\n\nto create and manipulate the base-R object data.\nto do data manipulation with data.table package.\nto do data visualization with ggplot2 package.\nto conduct regression analysis with lm() and make a publish-ready regression table with modelsummary() package.\nto write Monte code for Carlo simulations using for loop function.\n\n\n\n\n\nWe will meet each day from 1:00 PM to 4:00 PM, with office hours immediately following.\nEach lecture is divided into three sessions, with each session consisting of a 50-minute lecture and a 10-minute break.\nWe will have in-class exercises at the end of each topic, and after-class exercises (optional) to practice!\n\n\n\nNo textbook is required. Below are recommended resources:\n\n\nRecommended Reading\n\nR for Data Science\n\nggplot2 Book\n\nIntro to data.table\n\nIntro to Econometrics with R\n\n\n\nEssential Cheatsheets\n\nBase R\n\ndata.table\n\nggplot2\n\nR Markdown"
  },
  {
    "objectID": "Lec0.html#about-myself",
    "href": "Lec0.html#about-myself",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "About myself",
    "text": "About myself\n\nQingyin Cai\n\nFrom China\nFifth-year Ph.D. in Applied Economics\nArea of interests: Food and Agriculture Economics, Consumer Economics, and Environment Economics.\n\n\n\n\nIntroduce yourself\n\nWhat’s your name?\nWhat’s your program?\nWhere are you from?\nWhat brings you to UMN?"
  },
  {
    "objectID": "Lec0.html#what-is-r",
    "href": "Lec0.html#what-is-r",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "What is R?",
    "text": "What is R?\n\nR is a powerful programming language for a wide range of tasks:\n\nData Manipulation: cleaning, reshaping, merging datasets, API.\n\nVarious Analysis: descriptive analysis, regression, GIS, spatial analysis, machine learning.\n\nData visualization.\n\nIt’s a great tool to communicate your results with others (documentation, papers, slides, books, etc.).\n\nComparison of R, Stata, and Python\n\n\n\n\n\n\n\n\n\nCriteria\nR\nStata\nPython\n\n\n\n\nPrimary Use\nStatistical analysis, visualization, research\nEconomics/social science research; valued for tested results\nGeneral-purpose; machine learning, web scraping, automation\n\n\nCost\nOpen-source\nCommercial license\nOpen-source\n\n\nData Visualization\nExcellent\nLess flexible or aesthetically pleasing\nVery powerful, but can be verbose\n\n\nEcosystem\nLarge academic community; many packages on CRAN\nStrong in economics but smaller user base\nHuge, diverse community\n\n\nHandling Big Data\nBase R is memory-bound; packages like data.table / arrow improve performance\nMemory-bound\nExcellent"
  },
  {
    "objectID": "Lec0.html#ai-and-learning-r",
    "href": "Lec0.html#ai-and-learning-r",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "AI and Learning R",
    "text": "AI and Learning R\n\nAI can help, but it cannot replace understanding.\n\nTools like ChatGPT or Copilot can generate R code, but you need to know if the code is correct and appropriate.\n\nYou’ll understand why a method works, not just how to run it.\n\nAcademic integrity & skill development.\n\nEmployers and researchers may expect you to adapt and debug code yourself.\n\nLong-term benefit.\n\nOnce you know R, AI becomes a more powerful assistant — you can ask better questions and spot mistakes."
  },
  {
    "objectID": "Lec0.html#r-in-the-apec-curriculum",
    "href": "Lec0.html#r-in-the-apec-curriculum",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "R in the APEC curriculum",
    "text": "R in the APEC curriculum\n\nWe use R extensively in the Econometrics series (APEC 8211-8214).\n\nTo conduct regression analysis (OLS, IV, FE, etc.).\n\nTo conduct Monte Carlo simulations.\n\ne.g., To understand the difference in variance inference techniques.\n\n\n\nDon’t worry if you are new to this!\n\nBasic knowledge is enough to start.\n\nIf you would like to learn R programming further, I recommend that you take Programming for Econometrics (APEC8221) and Big Data Methods in Economics (APEC8222)."
  },
  {
    "objectID": "Lec0.html#rstudio",
    "href": "Lec0.html#rstudio",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "Rstudio",
    "text": "Rstudio\n\n\nWhat is it?Create New R code FileChange the theme (Optional)Multiple panes (Optional)Command Palette (Optional)\n\n\n\nYou can use  app to write and run R codes, but it has a terrible graphic user interface.\nRstudio is an Integrated Development Environment. It provides a user-friendly interface to write and run R code, view plots, and manage files.\nYou must install R (the engine) before you can use RStudio!\nR studio looks like this:\n\n\n\n\nImage Source: Rstudio User Guide\n\n\n\n\n\nTo create new R script file, click the + button on the top-left corner of the Rstudio, or hit Ctrl + Shift + N (Cmd + Shift + N on mac).\nTo save the file, click the floppy disk icon , or Ctrl + S (Cmd + S on macOS).\n\n\n\n\nImage Source: Rstudio User Guide\n\n\n\n\n\nYou can change the appearance of Rstudio by going to Tools -&gt; Global Options -&gt; Appearance -&gt; Editor theme and select your favorite theme.\n\n\n\n\nImage Source: Rstudio User Guide\n\n\n\n\n\nYou can have multiple code panes in Rstudio.\n\nTo create a new pane, go to Tools -&gt; Global Options -&gt; Pane Layout -&gt; Add Column.\n\nIn the same window, you can also change the layout of the panes.\n\n\n\n\n\n\n\n\n\nRecent R-studio has a new feature called “Command Palette.”\n\nHit Ctrl + Shift + P (Cmd + Shift + P on macOS) on your keyboard, or go to Tools -&gt; Show Command Palette.\nFrom here, you can search for and do almost anything: create new files, open projects, etc.\n\n\n\n\nSource: Rstudio User Guide"
  },
  {
    "objectID": "Lec0.html#rstudio-running-code",
    "href": "Lec0.html#rstudio-running-code",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "Rstudio: Running Code",
    "text": "Rstudio: Running Code\nLet’s write some codes.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nR code\n\nAny thing you write in the source (or console) pane is regarded as R code.\n\nTo run (execute) the code, select the code line, and click the “Run” bottom, or use the shortcut key: Ctrl + Enter (Cmd + Enter on macOS).\n\nComment block\n\nAny line starting with a # is a comment. R will ignore it. Use comments to leave notes for yourself and others!"
  },
  {
    "objectID": "Lec0.html#summary",
    "href": "Lec0.html#summary",
    "title": "Day 1: Introduction to R Statistical Analysis Software",
    "section": "Summary",
    "text": "Summary\n\n\nYou are now familiar with the basics of RStudio. As long as you know how to create, save, and run a script, you are ready for the next lecture.\nFor more details, see the official RStudio IDE Cheatsheet.\nWhile RStudio is the most popular tool, you can also run R in other editors like Visual Studio Code to run R. Nevertheless, Rstudio is a great starting point to get familiar with R."
  },
  {
    "objectID": "Lec2.html#section",
    "href": "Lec2.html#section",
    "title": "Day 2: Data wrangling with data.table",
    "section": "",
    "text": "Learning Objectives\n\nUse basic data wrangling skills with the data.table package\n\nLearn how to use the %&gt;% operator from the magrittr package (Optional)\n\n\n\n Reference\n\n\nIntroduction to data.table\n\n\nEfficient reshaping using data.table\n\nR for Data Science, Ch18: Pipes"
  },
  {
    "objectID": "Lec2.html#todays-outline",
    "href": "Lec2.html#todays-outline",
    "title": "Day 2: Data wrangling with data.table",
    "section": "\n Today’s outline:",
    "text": "Today’s outline:\n\n\nData manipulation with data.table\n\nWhat is data.table?\ndata.table syntax\nSubset rows\nSelect columns\nCompute on columns\nCreate a new column\nPerform aggregations by group\nReshape datasets\nMerge datasets\n\n\n%&gt;% operator (optional)\nAfter-class Exercise Problems\nAppendix"
  },
  {
    "objectID": "Lec2.html#what-is-data-table",
    "href": "Lec2.html#what-is-data-table",
    "title": "Day 2: Data wrangling with data.table",
    "section": "What is data.table?",
    "text": "What is data.table?\n\n\nWhat is it?\nBefore Starting\n\n\n\n\n\ndata.table is a package in R that provides an enhanced version of data.frame.\n\nIt is designed to be fast and memory efficient.\n\n\n\n\n\nThere is another package called dplyr that is also popular for data wrangling. But data.table is much faster than dplyr particularly for large-scale data manipulation tasks.\n\nSee this for the speed comparison of dplyr and data.table.\n\n\nThis website compares dplyr vs data.table side by side. If you already know dplyr syntax, this website would be helpful to understand data.table syntax.\n\n\n\n\n\n\nLet’s use flights data, which is obtained from nycflights13.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nConverting to data.table\n\n\n\nTo use the special features of the data.table package, the data must be in the data.table class.\n\nYou can convert a data.frame (or tibble) into a data.table by using the setDT() function.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#syntax-data-table",
    "href": "Lec2.html#syntax-data-table",
    "title": "Day 2: Data wrangling with data.table",
    "section": "data.table syntax",
    "text": "data.table syntax\nThe general form of data.table syntax is\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\ni: choose rows (filtering or subsetting)\n\nj: choose or transform columns (summaries, calculations, or selecting variables)\n\nby: group by variables (do the calculation in j separately for each group)\n\n\nSimply put,\nStart with a data.table DT. First pick rows using i, then work on columns with j, and if needed, repeat that operation for each group defined by by."
  },
  {
    "objectID": "Lec2.html#section-1",
    "href": "Lec2.html#section-1",
    "title": "Day 2: Data wrangling with data.table",
    "section": "",
    "text": "Using data.table syntax, we will see how to:\n\nsubset rows\nselect columns, compute on the selected columns, create a new column\nperform aggregations by group"
  },
  {
    "objectID": "Lec2.html#subset-rows",
    "href": "Lec2.html#subset-rows",
    "title": "Day 2: Data wrangling with data.table",
    "section": "1. Subset Rows",
    "text": "1. Subset Rows\n\n\nBasics\nIn-class Exercise\n\n\n\n\n\ndata.table syntax: DT[i, j, by]\n\nTo subset rows, put a condition on a column inside i.\n\nExample: DT[colA == \"value\", ] selects rows where column colA equals \"value\".\n\n\n\nExample\nSubset rows where carrier is \"AA\" (American Airlines):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWhat happens here?\n\n\ni: selects rows where carrier == \"AA\"\n\n\nj: no action (all columns)\n\nby: no action (no grouping)\n\n\n\n\n\n\n\nQuestions\nAnswers\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#other-row-related-tasks",
    "href": "Lec2.html#other-row-related-tasks",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Other row-related tasks",
    "text": "Other row-related tasks\nThe key idea: all tasks related to rows are done inside i.\n\nExample\n\n\nFilter rows\nSelect by row number\nRemove rows\nSort rows\n\n\n\nSelect flights where carrier is \"AA\":\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nReturn the first 5 rows:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nExclude rows 1 to 10:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSort by month (ascending) and then day (descending):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#select-columns",
    "href": "Lec2.html#select-columns",
    "title": "Day 2: Data wrangling with data.table",
    "section": "2. Select Columns",
    "text": "2. Select Columns\n\n\nBasics\nMultiple columns\nIn-class exercise\n\n\n\n\n\ndata.table syntax: DT[i, j, by]\n\nTo select columns, use the j argument\n\nExample:\nSuppose we want to select dep_time column. Since we are not subsetting rows, we leave the i argument blank.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIf we wrap variables (column names) in list(), the result will be returned as a data.table.\n\n\n.() is simply shorthand for list() in data.table syntax.\n\n\nImportant: In data.table, each column is internally stored as a list. When you use .() (or list()) in the j expression, each element of that list becomes a column in the resulting data.table.\n\n\n\n\nYou can select multiple columns just like you did to select a single column.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nQuestions\nAnswers\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#compute-on-columns",
    "href": "Lec2.html#compute-on-columns",
    "title": "Day 2: Data wrangling with data.table",
    "section": "3. Compute on Columns",
    "text": "3. Compute on Columns\n\nBasics\n\n\ndata.table syntax: DT[i, j, by]\n\n\nj not only allows you to select columns but also to compute on columns\n\nExample\nLet’s count the number of trips which have had total delay &lt; 0 (i.e., total day = dep_delay + arr_delay).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhat happens in this code?\n\n\ni: no action (all rows are used)\n\n\nj: takes the sum of the logical vector arr_delay + dep_delay &lt; 0\n\n\nby: no action (no grouping)\n\nNote: Since we skip the i expression, we must include a comma before the j expression."
  },
  {
    "objectID": "Lec2.html#compute-on-columns-of-the-subsetted-rows",
    "href": "Lec2.html#compute-on-columns-of-the-subsetted-rows",
    "title": "Day 2: Data wrangling with data.table",
    "section": "3. Compute on Columns of the Subsetted Rows",
    "text": "3. Compute on Columns of the Subsetted Rows\n\n\nBasics\nMultiple outputs\nIn-class exercise\n\n\n\n\n\ndata.table syntax: DT[i, j, by]\n\nUsing i and j expressions together, you can perform calculations on the selected columns of the subsetted rows.\n\n\nExample\nHow many flights departed from “JFK” airport in the month of June?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat happens in this code?\n\n\ni : to select rows where origin airport equals “JFK”, and month equals 6.\n\nj : to count the number of rows in the subsetted data.\n\nby : no action (no grouping)\n\n\n\n\nYou can assign names to the values you calculate in j.\nRecall that .() is a shorthand for list() in data.table syntax. You can name each element inside .() just like naming elements in a regular list.\n\n\nExample\nCount how many flights departed from JFK airport in June. For those flights, calculate the average departure delay (dep_delay).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nQuestions\nAnswers\n\n\n\n\nFind the average arrival delay and the average departure delay for flights that departed from JFK in August.\n\n\nHint:\n\nUse the columns: origin, month, arr_delay, dep_delay\n\nUse the mean() function to calculate averages\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFind the average arrival delay and the average departure delay for flights that departed from JFK in August.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#create-a-new-column",
    "href": "Lec2.html#create-a-new-column",
    "title": "Day 2: Data wrangling with data.table",
    "section": "4. Create a New Column",
    "text": "4. Create a New Column\n\n\nBasics\nExample\nMultiple new columns\nNote\nUpdate with a condition\nIn-class exercise\n\n\n\n\n\ndata.table syntax: DT[i, j, by]\n\nIn j expression, you can add or update a column in the data table using the := operator.\n\nThink of := as a special assignment operator inside data.table. It modifies the data table by reference (changes the original table without making a copy).\n\n\n\n\nSyntax\n# === Add one column === #\nDT[, \"new_column_name\" := .(valueA)]\n\n# or you can drop the quotes and `.()` for convenience\nDT[, new_column_name := valueA]\n\n\nUsing the dataset below, create a new column c that is the sum of columns a and b.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nImportant Rule\nThe operator := creates new columns by updating the data in place (by reference). This means the original data table is directly modified.\n\n\nHere is how you define multiple variables at the same time.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nThe := operator in data.table does not allow you to reference newly created or modified columns within the same [ expression.\nIf you want to use a new column in another calculation, you need a second [ step.\n\nExample\n\nLet’s create two new columns: (1) c by adding a and b, and (2) d by dividing c by a.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nUsing i and j expressions together, you can change the column values for rows that satisfy certain conditions.\n\nExample:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nKeeping the original data:\n\nIf you want to keep the original dataset unchanged, use the data.table::copy() function to create a duplicate.\nThe object created with copy() is completely independent: changes to one will not affect the other.\n\n\n\n\n\nQuestions\nAnswers\n\n\n\nCreate two new columns in the flights data:\n\n\ntotal_delay: the sum of dep_delay and arr_delay.\n\nspeed: the ratio of distance to air_time (i.e, distance/air_time.)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#perform-aggregations-by-group",
    "href": "Lec2.html#perform-aggregations-by-group",
    "title": "Day 2: Data wrangling with data.table",
    "section": "5. Perform Aggregations by Group (Grouped Operations)",
    "text": "5. Perform Aggregations by Group (Grouped Operations)\n\n\nBasics\nGroup by multiple columns\nGrouped operations for select observations\nIn-class exercise\n\n\n\n\n\ndata.table syntax: DT[i, j, by]\n\nTo perform grouped operations, use by argument.\n\nSyntax\n\nDT[, .(new_column = function(column)), by = .(group_variable)]\n\n\nExample: Let’s find the number of flights by origin.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWhat happens in this code?\n\n\ni: no action (all rows)\n\nj: count the number of rows in each group defined by by argument\n\nby: group the data by origin\n\n\n\n\nNothing special. Just provide multiple columns to by argument.\n\nExample: Find the average time of departure delay and arrival delay by carrier and origin.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nBy combining the i argument with by, you can perform grouped operations on a subset of rows.\n\nExample 1: Get the number of flights for each origin airport for carrier code “AA” (American Airlines).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWhat happens in this code? - i: subset rows where carrier is “AA” - j: count the number of rows in each group defined by by argument - by: group the data by origin\n\nExample 2: Find the number of flights by origin and month for carrier code “AA” (American Airlines).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nQuestions\nAnswers\n\n\n\n\nFor each month and each carrier, calculate the total number of flights, average departure delay, and average arrival delay.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n(Optional) Define seasons (Winter: Dec-Feb, Spring: Mar-May, Summer: Jun-Aug, Fall: Sep-Nov) and summarize the total number of flights, average departure delay, and average arrival delay for each season and each carrier.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nFor each month and each carrier, calculate the total number of flights, average departure delay, and average arrival delay.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n(Optional) Define seasons (Winter: Dec-Feb, Spring: Mar-May, Summer: Jun-Aug, Fall: Sep-Nov) and summarize the total number of flights, average departure delay, and average arrival delay for each season and each carrier.\n\nNote: I used fcase() function of data.table package to define seasons. It is useful when you want to define a variable that takes different values based on conditions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#summary",
    "href": "Lec2.html#summary",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Summary",
    "text": "Summary\nSo far, we have covered the basic operations in the data.table package.\nFocus on these key ideas:\n\nThe general syntax is DT[i, j, by]:\n\n\ni → rows\n\n\nj → columns\n\n\nby → groups\n\n\nUse i for anything related to rows.\n\nExample: filter rows with conditions.\n\n\nUse j for anything related to columns.\n\nExample: select columns, compute new values (use .()), or add/update columns with :=.\n\n\nUse by for anything related to grouped operations.\n\nExample: calculate summaries by group.\n\n\n\n\nWith just these three pieces (i, j, and by), you can handle most data manipulation tasks in data.table."
  },
  {
    "objectID": "Lec2.html#section-2",
    "href": "Lec2.html#section-2",
    "title": "Day 2: Data wrangling with data.table",
    "section": "",
    "text": "Next, we will see a few advanced topics:\n\nReshaping Data\nMerging Multiple Datasets\n(and the %&gt;% operator if we have time)."
  },
  {
    "objectID": "Lec2.html#reshape-data",
    "href": "Lec2.html#reshape-data",
    "title": "Day 2: Data wrangling with data.table",
    "section": "6. Reshape Data",
    "text": "6. Reshape Data\n\n\nBasics\nLong to wide\nWide to long\nWhy reshape data?\nIn-class exercise\n\n\n\nData often comes in two formats: long or wide.\nExample:\n\n\nLong data:\nEach student appears in multiple rows (one per year).\n\n\n   student  year  math reading\n    &lt;char&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt;\n1:   Alice  2021    78      82\n2:   Alice  2022    85      88\n3:     Bob  2021    92      90\n4:     Bob  2022    95      93\n5: Charlie  2021    88      85\n6: Charlie  2022    90      87\n7:   Diana  2021    70      75\n8:   Diana  2022    80      83\n\n\n\nWide data\nEach student appears in one row, with columns for each year’s scores.\n\n\n   student math_2021 math_2022 reading_2021 reading_2022\n    &lt;char&gt;     &lt;num&gt;     &lt;num&gt;        &lt;num&gt;        &lt;num&gt;\n1:   Alice        78        85           82           88\n2:     Bob        92        95           90           93\n3: Charlie        88        90           85           87\n4:   Diana        70        80           75           83\n\n\n\n\n\nWe can convert one format to another using dcast() and melt() functions of data.table package.\n\n\n\n\nUse dcast() function converts long form to wide form\n\nBasic Syntax:\n\ndcast(data, LHS ~ RHS , value.var = c(\"var1\", \"var2\"))\n\n\n\nLHS: set of id variables (variables (columns) that you don’t want change).\n\nRHS: set of variables to be used as the column index.\n\nvalue.var: set of variables whose values will be filled to cast.\n\n\nExample:\nSuppose that we want to organize the data so that each student’s math and reading scores appear in the same row.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTips\n\nBefore coding a reshape, first visualize the format you want the data to take.\n\nI often sketch a small example table.\n\nThis helps me to understand what variables I need to use as LHS, RHS, and value.var.\n\n\n\n\n\n\nUse melt() function to convert wide form to long form\n\nBasic Syntax:\n\nmelt(data, id.var = c(\"id_var1\", \"id_var2\"), measure.vars = c(\"var1\", \"var2\"))\n\n\n\nid.vars: the set of id variables (variables (columns) that you don’t want change).\n\nmeasure.vars: the set of columns you want to collapse (or combine) together.\n\nvalue.name: (optional) the name of the new column that will store the values of the variables in measure.vars, the default is value\n\n\n\nExample:\nLet’s get back to the original data format student_long from student_wide.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNotice that the year info is stored as variable (1, 2).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSummarizing is easier in long form.\n\nExample: average math/reading score by year.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nVisualization is easier in long form.\n\nExample: plotting scores by year (when we use ggplot later).\n\n\n\n\n\nQuestions\nAnswers\n\n\n\nUsing the following long-form data named long_data, can you get back student_long?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#merge-multiple-datasets",
    "href": "Lec2.html#merge-multiple-datasets",
    "title": "Day 2: Data wrangling with data.table",
    "section": "7. Merge Multiple Datasets",
    "text": "7. Merge Multiple Datasets\n\n\nBasics\nExample\nIn-class exercise1\nIn-class exercise 2\n\n\n\nYou can use the merge() function from the data.table package to merge two datasets. \nBasic Syntax:\n\n# Merge data y to data x keeping all rows from data x\nmerge(x, y, by = \"key_column\", all.x = TRUE)\n\n\n\nx, y: data tables.\n\nby: specifies variables that let you merge two datasets.\n\nall.x = TRUE means that all rows from x are maintained in the merged dataset, and only matching rows from y are included.\n\n\nNote: The order of the datasets matter.\n\n\n\n\nInstructions\nMerge\n\n\n\nLet’s play around with the merge() function using the following small data.\n\n\nData 1\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nData2\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nNote that the students included inmath_data and reading_data are slightly different. This is to show how the merge() function works when there are unmatched rows in the two datasets.\n\nTo merge these two datasets, student works because it is the key column. \n\n\n\n\n(1) Merge reading_data to math_data, keeping all rows from math_data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n(2) Merge math_data to reading_data, keeping all rows from reading_data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n(3) If you want to keep all rows from both datasets, set all = TRUE.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nQuestions\nAnswers\n\n\n\n\nIn the flights data, the carrier column contains two-letter codes for airlines. Let’s translate these codes into the full name of the airline.\n\nAirline data from nycflights13 package contains the full name of the airline corresponding to the two-letter code. The following code loads the airline data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMerge flights and airlines data, keeping all rows from the flights data. Which variable should be used as a key column?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nObviously, flights data is the main data, so we should keep all rows from the flights data.\nThe key column should be carrier because it is the common variable in both datasets, and it gives one-to-one correspondence between the two datasets.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nQuestions\nAnswers\n\n\n\nRun the following code to create two datasets: yield_data and weather_data.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nMerge these two datasets, keeping all rows from math_data. Which variable(s) should be used as key columns?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nHere you should use both student and year as key columns.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#motivation",
    "href": "Lec2.html#motivation",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Motivation",
    "text": "Motivation\n\nIn R, you need to assign the result of each operation to a new object if you want to use the result in the subsequent process.\nBut sometimes, some objects are just intermediate results that you don’t need to keep.\n\nExample\nLet’s first create flights_mini data from flights data of nycflights13 package in the data.table format.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe first three lines yield intermediate results to make the final flight_mini, and you don’t need to keep those.\n\nYou can create flights_mini without using those intermediate steps with the chaining operation in data.table package, but it’s hard to read!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#introduction",
    "href": "Lec2.html#introduction",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Introduction",
    "text": "Introduction\n\n\nWhat is %&gt;%?\nBasics\nRefer to the Preceding Object\n\n\n\n\n\n%&gt;% a special symbol in R, called a pipe operator. It comes from the magrittr package.\nIt’s a powerful tool to write linear sequence of operations in a more readable way.\n\n\nNote: When you load the dplyr package, magrittr package is automatically loaded as well. So, you don’t need to load the magrittr package separately to use %&gt;%.\n\n\n%&gt;% takes the output of the code on its left and feeds it as the first argument to the function on its right.\n\nExample 1\nfun1(input1) \nis the same as\ninput1 %&gt;% fun1()\n\nExample 2\noutput1 &lt;- fun1(input1)\noutput2 &lt;- fun2(output1)\nis the same as\noutput2 &lt;- fun1(input1) %&gt;% fun2()\n\n\nWhat if you want to use the object defined before %&gt;% as the second or third argument of the subsequent function?\nYou can refer the preceding object by . in the subsequent function.\nExample\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTip - Whenever you use %&gt;%, I recommend you always use . in the subsequent function to explicitly denote the destination of the object defined before %&gt;% even if it is the first argument."
  },
  {
    "objectID": "Lec2.html#example-2",
    "href": "Lec2.html#example-2",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Example",
    "text": "Example\nWithout %&gt;%\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWith %&gt;%\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNote that the order of execution is the same as the order in which the functions are written."
  },
  {
    "objectID": "Lec2.html#summary-1",
    "href": "Lec2.html#summary-1",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Summary",
    "text": "Summary\n The topics in the second part of this lecture were more advanced, so you don’t need to memorize every function right away.\nWhat I want you to remember are the following key ideas:\n\nYou can reshape data using the functions dcast() and melt(). Depending on your goal, one format (wide or long) may be easier to analyze than the other.\nYou can merge datasets using the merge() function, but you must have at least one common key column between the datasets.\n\nYou don’t need to use %&gt;% operator, unless you thinks it would be more convenient."
  },
  {
    "objectID": "Lec2.html#exercise-1",
    "href": "Lec2.html#exercise-1",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\nInstructions\nAnswers\n\n\n\n\nFind the flight company with the longest departure delay. (Hint: use max() function to find the maximum value of dep_delay column)\nSubset the information of flights that headed to MSP (Minneapolis-St Paul International Airport) in February. Let’s name it “msp_feb_flights”. How many flights are there?\nCalculate the median, interquartile range (\\(IQR = Q3 − Q1\\)) for arr_delays of flights in in the msp_feb_flights dataset and the number of flights, grouped by carrier. Which carrier has the most variable arrival delays?\n\n\nHints: IQR = Q3 − Q1 (the difference between the 75th percentile and the 25th percentile.) Use quantile() function to calculate the quantiles.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#exercise-2",
    "href": "Lec2.html#exercise-2",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\nInstructions\nAnswers\n\n\n\nIf you were selecting an airport simply based on on-time departure percentage, which NYC airport would you choose to fly out of? - To address this question, first, define a new variable which indicates on-time departure. On-time-departure can be defined as a departure delay of less than or equal to 0. Then, calculate the on-time departure rate for each airport.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#exercise-3",
    "href": "Lec2.html#exercise-3",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Exercise 3",
    "text": "Exercise 3\n\n\nData\nInstructions\nSolutions\n\n\n\nFor this exercise problem, we will use journal data from the AER package.\n- First, load the data and convert it to data.table object using setDT function (or. as.data.table()). Take a look at the data.\n- Also, type ?journal to see the description of the data.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCalculate the average number of pages and price for the entire dataset.\nShow the title, citations, price, and subs columns for the top 5 journals (title) with the highest number of citations (citations). (Hint: use order() function to sort the data by citations in descending order.).\nThis dataset is created in the year 2000. Calculate the age (age) of each journal by subtracting the start year (foundingyear) of the journal from 2000. Select the columns, price, subs, citations, and pages, and age. Use that data to create a correlation matrix between those variables using the cor() function. (Hint: use this syntax: cor(data)). Can you find anything interesting from the correlation matrix?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "Lec2.html#useful-functions",
    "href": "Lec2.html#useful-functions",
    "title": "Day 2: Data wrangling with data.table",
    "section": "Useful functions",
    "text": "Useful functions\n\n.N\ncopy()\nsetnames()\norder()\nshift()\n\nduplicated(): find duplicates\n\nunique(): find unique observations\nfcase()"
  },
  {
    "objectID": "Lec2.html#fcase",
    "href": "Lec2.html#fcase",
    "title": "Day 2: Data wrangling with data.table",
    "section": "fcase()",
    "text": "fcase()\n\nfcase() function is useful when you want to define a variable that takes different values based on conditions.\nfcase() function returns the first value for which the corresponding condition is TRUE. If no condition is TRUE, it returns the default value.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nExample: Define seasons (Winter: Dec-Feb, Spring: Mar-May, Summer: Jun-Aug, Fall: Sep-Nov)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]